name: 🚀 Deploy Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18.x'
  PM2_APP_NAME: 'mout-serveis'

jobs:
  # === JOB 1: TESTS I VALIDACIÓ ===
  test:
    name: 🧪 Tests i Validació
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd client && npm ci

    - name: 🔍 Lint Code
      run: |
        npm run lint
        cd client && npm run lint

    - name: 🧪 Run Backend Tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASS: test_password
        JWT_SECRET: test_jwt_secret_key_for_ci
      run: npm test

    - name: 🧪 Run Frontend Tests
      run: cd client && npm test

    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  # === JOB 2: BUILD FRONTEND ===
  build:
    name: 🏗️ Build Frontend
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: cd client && npm ci

    - name: 🏗️ Build Production
      run: cd client && npm run build
      env:
        NODE_ENV: production
        VITE_API_URL: ${{ secrets.VITE_API_URL }}
        VITE_SOCKET_URL: ${{ secrets.VITE_SOCKET_URL }}

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: client-build
        path: client/dist/
        retention-days: 1

  # === JOB 3: DEPLOY A PRODUCCIÓ ===
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://app.moutserveis.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📤 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: client-build
        path: client/dist/

    - name: 🔐 Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📡 Deploy to Server
      run: |
        # Configurar connexió SSH
        echo "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
        
        # Sincronitzar fitxers amb rsync
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          --exclude 'logs' \
          --exclude 'uploads' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.DEPLOY_PATH }}/
        
        # Executar comandos de deploy al servidor
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Instal·lar dependències backend
          npm ci --production
          
          # Executar migracions de BD
          npm run migrate:prod
          
          # Reiniciar aplicació amb PM2
          pm2 reload ${{ env.PM2_APP_NAME }} || pm2 start ecosystem.config.js
          
          # Verificar estat
          pm2 status ${{ env.PM2_APP_NAME }}
        EOF

    - name: 🏥 Health Check
      run: |
        # Esperar uns segons per que l'app es reiniciï
        sleep 30
        
        # Verificar que l'aplicació respon
        curl -f -s -o /dev/null -w "%{http_code}" ${{ secrets.HEALTH_CHECK_URL }} || exit 1
        
        echo "✅ Aplicació desplegada correctament!"

    - name: 📢 Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🚀 Deploy exitós a producció!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📢 Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Error en deploy a producció!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # === JOB 4: DEPLOY STAGING (Opcional) ===
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://staging.moutserveis.com

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📤 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: client-build
        path: client/dist/

    - name: 🔐 Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📡 Deploy to Staging Server
      run: |
        echo "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
        
        rsync -avz --delete \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.env' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.STAGING_DEPLOY_PATH }}/
        
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ${{ secrets.STAGING_DEPLOY_PATH }}
          npm ci --production
          npm run migrate:staging
          pm2 reload mout-serveis-staging || pm2 start ecosystem.staging.config.js
        EOF

# === CONFIGURACIÓ SECRETS NECESSARIS ===
# Repository Settings > Secrets and variables > Actions

# SSH_PRIVATE_KEY: Clau privada SSH per accedir al servidor
# SSH_HOST: IP o domini del servidor (exemple: server.moutserveis.com)
# SSH_USER: Usuari SSH (exemple: deploy)
# DEPLOY_PATH: Path al servidor on desplegar (exemple: /var/www/mout-serveis)
# STAGING_DEPLOY_PATH: Path per staging (exemple: /var/www/mout-serveis-staging)

# HEALTH_CHECK_URL: URL per verificar app (exemple: https://app.moutserveis.com/api/health)
# VITE_API_URL: URL API per frontend (exemple: https://app.moutserveis.com/api)
# VITE_SOCKET_URL: URL Socket.io (exemple: https://app.moutserveis.com)

# CODECOV_TOKEN: Token per uploads de coverage (opcional)
# SLACK_WEBHOOK: Webhook Slack per notificacions (opcional)
