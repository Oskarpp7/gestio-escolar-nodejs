name: 🧪 Test Suite (Anti-Hang)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  # === JOB 1: LINT I FORMAT ===
  lint:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd client && npm ci

    - name: 🔍 ESLint Backend
      run: npm run lint

    - name: 🔍 ESLint Frontend
      run: cd client && npm run lint

    - name: 💅 Prettier Check
      run: |
        npm run format:check
        cd client && npm run format:check

    - name: 📊 Report Lint Results
      uses: github/super-linter@v4
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BRANCH: main
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_CSS: true
        VALIDATE_MARKDOWN: true

  # === JOB 2: TESTS BACKEND ===
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🗄️ Setup Test Database
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASS: test_password
        DB_DIALECT: postgres
      run: |
        npm run migrate:test
        npm run seed:test

    - name: 🧪 Run Unit Tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASS: test_password
        DB_DIALECT: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test_jwt_secret_key_for_ci_testing
        JWT_REFRESH_SECRET: test_refresh_secret_key_for_ci
      run: npm run test:unit

    - name: 🔗 Run Integration Tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASS: test_password
        DB_DIALECT: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test_jwt_secret_key_for_ci_testing
        JWT_REFRESH_SECRET: test_refresh_secret_key_for_ci
      run: npm run test:integration

    - name: 📊 Generate Coverage Report
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASS: test_password
        JWT_SECRET: test_jwt_secret_key_for_ci_testing
      run: npm run test:coverage

    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  # === JOB 3: TESTS FRONTEND ===
  test-frontend:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: 📦 Install Dependencies
      run: cd client && npm ci

    - name: 🧪 Run Unit Tests
      run: cd client && npm run test:unit

    - name: 🎭 Run Component Tests
      run: cd client && npm run test:component

    - name: 📊 Generate Coverage Report
      run: cd client && npm run test:coverage

    - name: 📤 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  # === JOB 4: TESTS E2E ===
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd client && npm ci

    - name: 🗄️ Setup E2E Database
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db_e2e
        DB_USER: test_user
        DB_PASS: test_password
        DB_DIALECT: postgres
      run: |
        npm run migrate:test
        npm run seed:e2e

    - name: 🏗️ Build Frontend
      run: cd client && npm run build

    - name: 🚀 Start Test Server
      env:
        NODE_ENV: test
        PORT: 3001
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db_e2e
        DB_USER: test_user
        DB_PASS: test_password
        JWT_SECRET: test_jwt_secret_e2e
        CORS_ORIGINS: http://localhost:3001
      run: |
        npm run start:test &
        sleep 10
        curl -f http://localhost:3001/api/health || exit 1

    - name: 🎭 Run Playwright Tests
      run: cd client && npm run test:e2e
      env:
        E2E_BASE_URL: http://localhost:3001

    - name: 📤 Upload E2E Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: client/playwright-report/
        retention-days: 7

  # === JOB 5: SECURITY SCAN ===
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd client && npm ci

    - name: 🔍 Run npm audit
      run: |
        npm audit --audit-level high
        cd client && npm audit --audit-level high

    - name: 🛡️ Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: 📊 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # === JOB 6: PERFORMANCE TESTS ===
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: |
        npm ci
        cd client && npm ci

    - name: 🏗️ Build Production
      run: cd client && npm run build

    - name: ⚡ Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # === NOTIFICACIONS ===
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-frontend, test-e2e, security]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: ${{ needs.lint.result == 'success' && needs.test-backend.result == 'success' && needs.test-frontend.result == 'success' && needs.test-e2e.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '✅ Tots els tests han passat correctament!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📢 Notify Failure
      if: ${{ needs.lint.result == 'failure' || needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure' || needs.test-e2e.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '❌ Alguns tests han fallat. Revisa els logs!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
